- name: ' Deploy Etcd Backup Cron Job  | deploy-etcd-backup-cronjob.yml'
  hosts: localhost
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vault.yml'
    - 'global.yml'
  vars:
    module: "deploy-etcd-backup-cron"
    ansible_name_module: "Deploy Etcd Backup Cron Job | {{ module }}"

  pre_tasks:
    - name: Install required pip library
      pip:
        name: openshift
        state: present

    - name: Ensure Proper Python dependency is installed for Openshift
      python_requirements_facts:
        dependencies: 
          - openshift
          - requests 

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          --token {{ ocp_cluster_token }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      when:
        - ocp_cluster_token is defined and ocp_cluster_token != ""
      register: login_out

    - name: Authenticate with the API
      command: >
        {{ openshift_cli }} login \
          -u {{ ocp_cluster_user }} \
          -p {{ ocp_cluster_user_password }} \
          --insecure-skip-tls-verify=true {{ ocp_cluster_console_url }}:{{ ocp_cluster_console_port | d('6443', true) }}
      register: login_out

  tasks:
    - name: '{{ ansible_name_module }} | Create Etcd Backup Namespace'
      block:
        ##### Adding this to bypass restrictions on creating project with names starting with openshift  #####
        - name: '{{ ansible_name_module }} |  Create etcd-backup Namespace'
          command: >
            {{ openshift_cli }} create namespace '{{ etcdbackup_job_namespace }}'
          failed_when: "etcdbackup_ns_created.rc >=1 and not ' already exists' in etcdbackup_ns_created.stderr"
          when:
            - "'openshift' in etcdbackup_job_namespace"
          register: etcdbackup_ns_created

        - name: '{{ ansible_name_module }} |  Create etcd-backup Namespace'
          command: >
            {{ openshift_cli }} new-project '{{ etcdbackup_job_namespace }}' \
              --display-name='{{ etcdbackup_job_namespace_description }}' \
              --description='{{ etcdbackup_job_namespace_description }}'
          failed_when: "etcdbackup_ns_created.rc >=1 and not ' already exists' in etcdbackup_ns_created.stderr"
          when:
            - "not 'openshift' in etcdbackup_job_namespace"
          register: etcdbackup_ns_created

    - name: '{{ ansible_name_module }} | Create k8 secret for AWS access credentials'
      block:
        - name: '{{ ansible_name_module }} |  Create from AWS Access key'
          command: >
            {{ openshift_cli }} create \
             secret generic {{ aws_account_creds_secret }} \
             --from-literal=aws_access_key={{ aws_access_key }} \
             --from-literal=aws_access_secret={{ aws_key_secret }} \
             -n '{{ etcdbackup_job_namespace }}'
          failed_when: "secret_created.rc >=1 and not ' already exists' in secret_created.stderr"
          register: secret_created

       ### You need to have cluster admin role to run this task
    - name: Grant SCC Privilege to the Etcd Backup service account
      when:
         - add_privileged_scc_to_etcdbackup_sa is defined
         - add_privileged_scc_to_etcdbackup_sa | default('false') | bool
      block:
      - name: Grant Privileged SCC access
        command: >
          {{ openshift_cli }} adm policy \
            add-scc-to-user {{ scc_name }} \
            'system:serviceaccount:{{ etcdbackup_job_namespace }}:{{ item }}'
        failed_when:
          - privileged_access_granted.rc >= 1
          - not 'AlreadyExists' in privileged_access_granted.stderr
        with_items:
          - "{{ etcdbackup_service_account }}"
        when:
          - add_privileged_scc_to_etcdbackup_sa | bool
          - item != ""
        register: privileged_access_granted
        tags: privileged

    - name: '{{ ansible_name_module }} | Configure etcd-backup '
      block:
        - name: '{{ ansible_name_module }} | Create Etcdbackup template'
          command: "{{ openshift_cli }} create -f {{ etcdbackup_template_path }} -n {{ etcdbackup_job_namespace }}"
          failed_when: "etcdbackup_template_created.rc >=1 and not ' already exists' in etcdbackup_template_created.stderr"
          register: etcdbackup_template_created

        - name: '{{ ansible_name_module }} | shell | Process etcd-backup template'
          shell: >
            {{ openshift_cli }} process -f {{ etcdbackup_template_path }} \
            -p APPLICATION_NAME='{{ etcdbackup_service_name }}' \
            -p APPLICATION_NAMESPACE={{ etcdbackup_job_namespace }} \
            -p AWS_ACCT_CREDS_SECRET='{{ aws_account_creds_secret }}' \
            -p AWS_BUCKET='{{ aws_bucket }}' \
            -p AWS_BUCKET_OBJECT='{{ aws_bucket_object }}' \
            -p AWS_REGION='{{ aws_region }}' \
            -p AWS_CLI_IMAGE_REGISTRY_REPO='{{ aws_cli_image_registry_repository }}' \
            -p AWS_CLI_IMAGE='{{ aws_cli_image_name }}' \
            -p SERVICE_ACCOUNT_NAME={{ etcdbackup_service_account }} \
            -p ETCD_BACKUP_CRON_EXPRESSION='{{ cron_jon_schedule_expression }}' \
            -n {{ etcdbackup_job_namespace }} \
            | oc apply -f -
          register: etcbackup_cron_created

